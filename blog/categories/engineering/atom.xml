<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Engineering | Dong Guo's Blog]]></title>
  <link href="http://guod08.github.io/blog/categories/engineering/atom.xml" rel="self"/>
  <link href="http://guod08.github.io/"/>
  <updated>2015-01-10T20:30:27+08:00</updated>
  <id>http://guod08.github.io/</id>
  <author>
    <name><![CDATA[Dong Guo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Druid in Practise: An Open-source Infrastructure for Real-time Analytics on Large Dataset]]></title>
    <link href="http://guod08.github.io/blog/2014/05/05/druid-an-infrastructure-for-real-time-analytics-on-large-dataset/"/>
    <updated>2014-05-05T22:25:34+08:00</updated>
    <id>http://guod08.github.io/blog/2014/05/05/druid-an-infrastructure-for-real-time-analytics-on-large-dataset</id>
    <content type="html"><![CDATA[<h4>Keywords</h4>

<p>Druid, column-stores, distributed system, bitmaps</p>

<h4>Background</h4>

<p>最近在设计一个系统来预估未来的广告流量，不是总流量，是任意时间段任何定向条件（Targeting rule）约束情况下的流量。定向条件有近百个（内容，设备平台，用户地域，用户人口属性等），整个时间区间不同组合数是几千万量级。目标是秒级的响应时间。</p>

<p><strong>Example</strong>
<img src="http://guod08.github.io/images/personal/engineering/druid/impression_table.png" width=800 align=bottom /></p>

<h4>Mysql is not a good choice</h4>

<p>在我的应用中，典型的查询包含若干个定向条件，Mysql加快查询速度的方法就是索引或组合索引，在这个应用中单个组合可能包含5+个定向条件，且常用的列组合有几十个，实际测试结果是加了组合索引后整体查询速度提升有限。</p>

<h4>We want a fast &amp; distributed data store infrastructure</h4>

<p>我们的核心需求包含2点，一是查询速度快，二是系统的拓展性好，最好是分布式的。</p>

<p>第一点要求意味着最好用column-store而不是row-store，业界普遍的观点是对于修改操作较少，查询往往只涉及少数几列的场景使用column-store可以获得快一个量级的查询速度。column-store可以通过bitmap indexing，encoding,compression来优化查询速度和存储开销。具体参见：</p>

<p>第二点要求一方面是由于我们的数据量较大，并行存储和查询可以减少时间开销，另一方面是数据量每年还在快速上涨，以后可以通过加机器来应对。</p>

<h4>Druid Introduction</h4>

<p>Druid满足我们上面2点要求，其是一个开源的、分布式的、列存储系统，特别适用于大数据上的（准）实时分析统计。且具有较好的稳定性（Highly Available）</p>

<p>Druid基础的数据单位是Segment，可以自己设置多长时间的数据对应一个segment。</p>

<p><strong>Druid Cluter Overview</strong>
<img src="http://guod08.github.io/images/personal/engineering/druid/druid_system.png" width=800 align=bottom /></p>

<p><strong>Node types in Druid: Real-time nodes, Historical nodes, Coordinator nodes, Broker nodes</strong></p>

<p>Historial nodes: 处理'Historical' segments的存储和查询（从deep storage中load segmetns并响应Broder nodes的请求）。</p>

<p>Real-time nodes: 用于存储和查询热数据，会定期地将数据build成segments移到Historical nodes。其不是必需的，如果不需要实时ingest数据到cluter中，可以舍弃Real-time nodes，定时地batch ingestion数据到deep storage。</p>

<p>Coordinator nodes: 可以认为是Druid中的master，其通过Zookeeper管理Historical和Real-time nodes，且通过Mysql中的metadata管理Segments</p>

<p>Broker nodes: 响应外部的查询请求，通过查询Zookeeper将请求划分成segments分别转发给Historical和Real-time nodes，最终合并并返回查询结果给外部</p>

<p><strong>Externel dependencies of Druid：Deep Storage, ZooKeeper, Mysql</strong></p>

<p>Deep storage: 存储segments，Druid支持本地磁盘，HDFS，S3以及Cassandra，我们测试了本地磁盘和HDFS。Deep Storage的数据有2个来源，一个是<a href="http://druid.io/docs/0.6.104/Batch-ingestion.html">batch Ingestion</a>, 另一个是real-time nodes；</p>

<p>ZooKeeper: 被Druid用于管理当前cluster的状态，比如记录哪些segments从Real-time nodes移到了Historical nodes；</p>

<p>Mysql：存储Druid中的各种metadata（里面的表和数据都是Druid自身创建和插入的）。包括1).表druid_segments, 存储每个segment的metadata，2).表druid_rules, 给Coordinator nodes使用的规则信息（从哪个node load哪个segment）；3). 表druid_config, 号称存一些cluter配置信息，但是通常是空的。</p>

<h4>Setup &amp; Batch indexing &amp; Query</h4>

<p>Druid官网给了非常详细的文档介绍Druid，以及怎么使用 <a href="http://druid.io/">here</a>.</p>

<h4>Summary &amp; Notes</h4>

<ol>
<li>Druid是一个开源的、分布式的、列存储的、适用于实时数据分析的infrastructure，实测效果不错；</li>
<li>Performance：在我们的应用场景和数据量情况下（各种nodes的机器&lt;10台），平均查询时间在秒级别，是同样机器数目的Mysql cluter的1/10；</li>
<li>Druid在设计时充分考虑到了Highly Available，各种nodes挂掉都不会使得druid停止工作（但是状态会无法更新）；</li>
<li>Duid的数据单位Segment是不可修改的，我们的做法是生成新的segments替换现有的；</li>
<li>Druid使用Bitmap indexing加速column-store的查询速度，使用了一个叫做<a href="http://ricerca.mat.uniroma3.it/users/colanton/docs/concise.pdf">CONCISE</a>的算法来对bitmap indexing进行压缩，使得生成的segments比原始文本文件小很多；
在我们的应用场景和数据量情况下（各种nodes的机器&lt;10台），平均查询时间在秒级别，是同样机器数目的Mysql cluter的1/10.</li>
</ol>


<h4>Reference &amp; Recommended reading</h4>

<ol>
<li><a href="http://druid.io/">Druid.io</a></li>
<li>&lsquo;<a href="http://static.druid.io/docs/druid.pdf">Druid: A Real-time Analytical Data Store</a>&rsquo; is a very good introduction paper</li>
<li><a href="http://en.wikipedia.org/wiki/Bitmap_index">Bitmap indexing wikepedia</a></li>
<li><a href="http://ricerca.mat.uniroma3.it/users/colanton/docs/concise.pdf">Bitmap indexing compression algorithm used by Druid</a>
5.行存储or列存储？给小白：<a href="http://www.infoq.com/cn/articles/bigdata-store-choose">link</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
